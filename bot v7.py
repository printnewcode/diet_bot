import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests
import asyncio
import dotenv
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler

dotenv.load_dotenv()
API_KEY=os.getenv("API_KEY")
API_URL=os.getenv("API_URL")
BOT_TOKEN=os.getenv("BOT_TOKEN")


DAILY_LIMIT = 5

request_counter = DAILY_LIMIT
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


logging.basicConfig(level=logging.INFO)
router = Router()

class UserStates(StatesGroup):
    WAITING_AGE = State()
    WAITING_CALORIES = State()
    WAITING_GOAL = State()
    WAITING_WEIGHT = State()

def reset_counter():
    global request_counter
    request_counter = DAILY_LIMIT
    logging.info(f"–°—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {request_counter}")

async def get_diet_plan(age: int, calories: int, goal: str, weight: float) -> str:
    prompt = (
        f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ —Ä–∞–∑–∞–±–æ—Ç–∞–Ω–Ω—ã–π —É—á–µ–Ω–∏–∫–∞–º–∏ J-GET. –ë—É–¥—å –≤–µ–∂–ª–∏–≤. –ü—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:\n"
        f"–∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, —Ç—Ä–∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ code. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π #\n"
        f"–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"- –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"- –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories}\n"
        f"- –¶–µ–ª—å: {goal}\n"
        f"- –í–µ—Å: {weight} –∫–≥\n\n"
        f"–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –¥–µ–Ω—å, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π"
    )
    
    try:
        response = requests.post(
            API_URL,
            headers={
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-4o-mini",
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 0.7
            },
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()['choices'][0]['message']['content']
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    
    except Exception as e:
        logging.error(f"API error: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"

@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    global request_counter
    if request_counter <= 0:
        await message.answer("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚õîÔ∏è\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–≤—Ç—Ä–∞ ‚ò∫Ô∏è")
        return
    await state.set_state(UserStates.WAITING_AGE)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è. "
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç."
    )

@router.message(UserStates.WAITING_AGE)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!")
    await state.update_data(age=int(message.text))
    await state.set_state(UserStates.WAITING_CALORIES)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å.")

@router.message(UserStates.WAITING_CALORIES)
async def process_calories(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ —á–∏—Å–ª–æ–º!")
    await state.update_data(calories=int(message.text))
    await state.set_state(UserStates.WAITING_GOAL)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å", callback_data="lose_weight"),
        types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è", callback_data="eat_healthy"),
        types.InlineKeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –≤–µ—Å", callback_data="gain_weight")
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=builder.as_markup())

@router.callback_query(UserStates.WAITING_GOAL)
async def process_goal(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(goal=callback.data)
    await state.set_state(UserStates.WAITING_WEIGHT)
    await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–µ—Å")
    await callback.answer()

@router.message(UserStates.WAITING_WEIGHT)
async def process_weight(message: types.Message, state: FSMContext):
    global request_counter
    if not message.text.replace('.', '').isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º!")
    
    request_counter -= 1
    loading_msg = await message.answer("üë©‚Äçüî¨ –î–∏–µ—Ç–æ–ª–æ–≥ —É–∂–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è")
    
    user_data = await state.get_data()
    diet_plan = await get_diet_plan(
        user_data['age'],
        user_data['calories'],
        user_data['goal'],
        float(message.text)
    )
    
    await loading_msg.delete()

    try:
        await message.answer(
            f"–û–∫, –¥–µ—Ä–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ–Ω—é:\n\n{diet_plan}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Markdown formatting error: {str(e)}")
        await message.answer(
            f"–û–∫, –¥–µ—Ä–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ–Ω—é:\n\n{diet_plan}"
        )
    
    await state.clear()

async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    
    scheduler.add_job(reset_counter, 'cron', hour=0, minute=0)
    scheduler.start()
    
    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
